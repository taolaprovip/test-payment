// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using RePurpose_Models.Entities;

#nullable disable

namespace RePurpose_Models.Migrations
{
    [DbContext(typeof(RePurposeContext))]
    [Migration("20230926152619_db-payment")]
    partial class dbpayment
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "6.0.22")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder, 1L, 1);

            modelBuilder.Entity("RePurpose_Models.Entities.Category", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("PointX")
                        .HasColumnType("int");

                    b.Property<int>("PointY")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Image", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("ItemImage")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("ItemImage");

                    b.ToTable("Images");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Item", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid?>("CategoryId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("Created")
                        .HasColumnType("datetime2");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("GiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<Guid?>("ItemLocation")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickupTime")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Quantity")
                        .HasColumnType("int");

                    b.Property<Guid?>("ReceiverId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<DateTime>("Updated")
                        .HasColumnType("datetime2");

                    b.HasKey("Id");

                    b.HasIndex("CategoryId");

                    b.HasIndex("GiverId");

                    b.HasIndex("ItemLocation");

                    b.HasIndex("ReceiverId");

                    b.ToTable("Items");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Location", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Latitude")
                        .HasColumnType("float");

                    b.Property<Guid?>("LocationMember")
                        .HasColumnType("uniqueidentifier");

                    b.Property<double>("Longitude")
                        .HasColumnType("float");

                    b.HasKey("Id");

                    b.HasIndex("LocationMember")
                        .IsUnique()
                        .HasFilter("[LocationMember] IS NOT NULL");

                    b.ToTable("Locations");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Member", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("CreateAt")
                        .HasColumnType("datetime2");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("Image")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("IsDeleted")
                        .HasColumnType("bit");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PasswordHash")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.HasKey("Id");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.RefreshToken", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<DateTime>("ExpiresAt")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsActive")
                        .HasColumnType("bit");

                    b.Property<DateTime>("IssuedAt")
                        .HasColumnType("datetime2");

                    b.Property<Guid>("TokenMember")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("TokenValue")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.HasIndex("TokenMember");

                    b.ToTable("RefreshTokens");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Transaction", b =>
                {
                    b.Property<Guid>("TransactionId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("Timestamp")
                        .HasColumnType("datetime2");

                    b.Property<string>("Type")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid?>("WalletId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("TransactionId");

                    b.HasIndex("WalletId");

                    b.ToTable("Transactions");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Wallet", b =>
                {
                    b.Property<Guid>("WalletId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<decimal?>("Balance")
                        .HasColumnType("decimal(18,2)");

                    b.Property<DateTime?>("LastBalanceUpdate")
                        .HasColumnType("datetime2");

                    b.Property<Guid?>("MemberId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("WalletId");

                    b.HasIndex("MemberId")
                        .IsUnique()
                        .HasFilter("[MemberId] IS NOT NULL");

                    b.ToTable("Wallets");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Image", b =>
                {
                    b.HasOne("RePurpose_Models.Entities.Item", "Item")
                        .WithMany("Images")
                        .HasForeignKey("ItemImage")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Item");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Item", b =>
                {
                    b.HasOne("RePurpose_Models.Entities.Category", "Category")
                        .WithMany("Items")
                        .HasForeignKey("CategoryId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RePurpose_Models.Entities.Member", "Giver")
                        .WithMany("ItemsGiven")
                        .HasForeignKey("GiverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RePurpose_Models.Entities.Location", "Location")
                        .WithMany("Items")
                        .HasForeignKey("ItemLocation")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.HasOne("RePurpose_Models.Entities.Member", "Receiver")
                        .WithMany("ItemsReceived")
                        .HasForeignKey("ReceiverId")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Category");

                    b.Navigation("Giver");

                    b.Navigation("Location");

                    b.Navigation("Receiver");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Location", b =>
                {
                    b.HasOne("RePurpose_Models.Entities.Member", "Member")
                        .WithOne("Location")
                        .HasForeignKey("RePurpose_Models.Entities.Location", "LocationMember");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.RefreshToken", b =>
                {
                    b.HasOne("RePurpose_Models.Entities.Member", "Member")
                        .WithMany("RefreshTokens")
                        .HasForeignKey("TokenMember")
                        .OnDelete(DeleteBehavior.NoAction);

                    b.Navigation("Member");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Transaction", b =>
                {
                    b.HasOne("RePurpose_Models.Entities.Wallet", "Wallet")
                        .WithMany("Transactions")
                        .HasForeignKey("WalletId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Wallet");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Wallet", b =>
                {
                    b.HasOne("RePurpose_Models.Entities.Member", "Member")
                        .WithOne("Wallet")
                        .HasForeignKey("RePurpose_Models.Entities.Wallet", "MemberId");

                    b.Navigation("Member");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Category", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Item", b =>
                {
                    b.Navigation("Images");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Location", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Member", b =>
                {
                    b.Navigation("ItemsGiven");

                    b.Navigation("ItemsReceived");

                    b.Navigation("Location")
                        .IsRequired();

                    b.Navigation("RefreshTokens");

                    b.Navigation("Wallet")
                        .IsRequired();
                });

            modelBuilder.Entity("RePurpose_Models.Entities.Wallet", b =>
                {
                    b.Navigation("Transactions");
                });
#pragma warning restore 612, 618
        }
    }
}
